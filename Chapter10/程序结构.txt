10.1 局部变量
我们把在函数体内声明的变量称为该函数的局部变量。

局部变量具有下列性质:
1. 自动存储期限.
变量的存储期限(或存储长度)是在变量存储单元存在期内程序执行的部分.
局部变量的存储单元是在包含该变量的函数被调用时"自动"分配的, 函数返回时收回分配,
所以称这种变量具有自动的存储期限.
包含局部变量的函数返回时, 局部变量的值无法保留.当再次调用该函数时, 无法保证变量仍
拥有原先的值.

2. 块作用域.
变量的作用域是可以引用该变量的程序文本的部分.
局部变量拥有块作用域: 从变量声明的点开始一直到所在函数体的末尾.


10.1.1 静态局部变量
在局部变量声明中放置单词static可以使变量具有静态存储期限而不再是自动存储期限。
因为具有静态存储期限的变量用于永久的存储单元, 所以在整个程序执行期间都会保留变量的值。

void f(void)
{
    static int i;
    ...
}

因为局部变量i已经声明为static, 所以在程序执行期间它所占据的内存单元是不变的。
在f返回时, 变量i不会丢失其值.

10.1.2 形式参数
形式参数拥有和局部变量一样的性质, 即自动存储期限和块作用域.
事实上, 形式参数和局部变量唯一真正的区别是, 
在每次函数调用时对形式参数自动进行初始化.

10.2 外部变量
传递参数是给函数传递信息的一种方法.
函数还可以通过外部变量(external variable)进行通信.
外部变量是声明在任何函数体外的。

外部变量(有时也称为全局变量)的性质不同于局部变量的性质。
1. 静态存储期限。
就如同声明为static的局部变量一样, 外部变量拥有静态存储期限。
存储在外部变量中的值将永久保留下来。
2. 文件作用域。
外部变量拥有文件作用域: 从变量被声明的点开始一直到所在文件的末尾。
因此, 跟随在外部变量声明之后的所有函数都可以访问(并修改)它.


10.3 程序块


10.4 作用域


10.5 构建C程序
下面是一种可能的编排顺序:
#include指令
#define指令
类型定义
外部变量的声明
除main函数之外的函数的原型
main函数的定义
其他函数的定义


===============================================
问与答
问: 具有静态存储期限的局部变量会对递归函数产生什么影响?
答: 当函数是递归函数时, 每次调用它都会产生其自动变量的新副本.
    静态变量就不会产生这样的情况, 相反, 所有的函数调用都共享同一个静态变量.




