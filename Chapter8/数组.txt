到目前为止, 我们所见的变量都只是标量:标量是具有保存单一数据项的能力。
C语言也支持聚合变量, 这类变量可以存储一组一组的数值。
在C语言中一共有两种聚合类型: 数组和结构。


8.1 一维数组


8.1.1 数组下标


8.1.2 数组初始化
数组初始化(array initializer)最常见的格式是用一个大括号括起来的
常量表达式列表, 常量表达式之间用逗号进行分隔.
int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

如果初始化式比数组短,那么数组中剩余的元素赋值为0:
int a[10] = {1, 2, 3, 4, 5, 6};
/* initial value of a is {1, 2, 3, 4, 5, 6, 0, 0, 0, 0} */

利用这一特性, 可以很容易地把数组初始化为全0:
int a[10] = {0};
/* initial value of a is {0, 0, 0, 0, 0, 0, 0, 0, 0, 0} */

初始化式完全为空是非法的, 所以要在大括号内放上一个0.
初始化式比要初始化的数组长也是非法的。


8.1.3 指定初始化式(C99)
int a[15] = {[2] = 29, [9] = 7, [14] = 48};
括号中的数字称为指示符.

除了可以使赋值变得更简短, 更易读之外, 指定初始化式还有一个优点:
赋值的顺序不再是一个问题, 我们也可以把先前的例子重新写为:
int a[15] = {[14] = 48, [9] = 7, [2] = 29};


8.1.4 对数组使用sizeof运算符
运算符sizeof可以确定数组的大小(字节数).
如果数组a有10个整数, 那么sizeof(a)通常为40(假定每个整数占4个字节).

用sizeof来计算数组元素(如a[0])的大小:
sizeof(a[0])

用数组的大小除以数组元素的大小可以得到数组的长度:
sizeof(a) / sizeof(a[0])

for(i = 0; i < sizeof(a) / sizeof(a[0]); i++)
    a[i] = 0;

有些编译器会对表达式i < sizeof(a) / sizeof(a[0]) 给出一条警告消息.
变量i的类型可能是int(有符号类型), 而sizeof返回的值类型为size_t(一种无符号类型).

为了避免出现这一警告, 可以把sizeof(a) / sizeof(a[0])强制转换为有符号整数:
(int) (sizeof(a) / sizeof(a[0]))


8.2 多维数组
虽然我们以表格形式显式二维数组, 但是实际上它们在计算机的内存中不是这样存储的。
C语言是按照行主序存储数组的, 也就是从第0行开始, 接着第1行, 依次类推。

C99的指定初始化式对多维数组也有效.
double ident[2][2] = {[0][0] = 1.0, [1][1] = 1.0};
像通常一样, 没有指定值的元素都默认置为0.


8.2.2 常量数组
无论一维数组还是多维数组, 都可以通过在声明的最开始处加上单词
const而成为"常量":
const char hex_chars[] =
    {'0', '1', '2', '3', '4', '5', 
     'A', 'B', 'C', 'D', 'E', 'F'};


8.3 C99中的变长数组
数组变量的长度必须用常量表达式进行定义。
但是在C99中, 有时候也可以使用非常量表达式。


===========================================================
问与答:
问: 使用字符作为数组的下标是否可行呢?
答: 是可以的, 因为C语言把字符作为整数来处理. 
    但是, 在使用字符作为下标前, 可能需要对字符进行"缩放".
    举个例子, 假设希望数组letter_count对字母表中的每个字母进行跟踪计数.
    这个数组将需要26个元素, 所以可采用下列方式对其进行声明:
    int letter_count[26];

    letter_count[ch - 'a'] = 0;
    
问: 如果试图用赋值运算符把一个数组复制到另一个数组中, 编译器将给出出错消息.哪里错了?
答: 赋值语句
    a = b;
    看似合理, 但它确实是非法的.

    把一个数组复制到另一个数组中的最简单的实现方法是利用循环对数组元素逐个进行复制:
    for(i = 0; i < N; i++)
        a[i] = b[i];
    
    另一种可行的办法是使用来自<string.h>头的函数 memcpy(意思是"内存复制").
    memcpy函数是一个底层函数, 它把字节从一个地方简单复制到另一个地方.
    为了把数组b复制到数组a中, 使用函数memcpy的格式如下:
    memcpy(a, b, sizeof(a));


问: 6.4节提到, C99不允许goto语句绕过变长数组的声明. 为什么会有这一限制呢?
答: 在程序执行过程中, 遇到变长数组声明时通常就为该变长数组分配内存空间了。
    用goto语句绕过变长数组的声明可能会导致程序对未分配空间的数组中的元素进行访问。


