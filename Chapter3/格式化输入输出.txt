3.1 printf函数
printf函数被设计用来显示格式串(format string)的内容，
并且在该串中的指定位置插入可能的值。
printf(格式串, 表达式1, 表达式2, 表达式3, ...);

格式串包含普通字符和转换说明(conversion specification),
其中转换说明以字符%开头。
转换说明是用来表示打印过程中待填充的值的占位符。
跟随在字符%后边的信息指定了把数值从内部形式(二进制)转换成
打印形式(字符)的方法。
例如, 转换说明%d指定printf函数把int型值从二进制形式转换成
十进制数字组成的字符串，转换说明%f对float型值也进行类似的转换。


3.1.1 转换说明
我们用%.1f来显示小数点后带一位数字的float型值
更一般地，转换说明可以用 %m.pX格式或%-m.pX格式
m和p都是整数常量
X是字母

m ==> 最小字段宽度, 指定了要显示的最少字符数量
      如果要显示的数值所需的字符数少于m, 那么值在字段内是右对齐的
      如果要显示的值所需的字符数多于m, 那么字段宽度会自动扩展为所需的尺寸
      在m前放上一个负号会导致左对齐
p ==> 精度
X ==>   d  ==>  表示十进制(基数为10)形式的浮点数 
        e  ==>  表示指数(科学计数法)形式的浮点数
        f  ==>  表示"定点十进制"形式的浮点数
        g  ==>  表示指数形式或定点十进制形式的浮点数, 
                形式的选择根据数的大小决定
        
3.1.2 转义序列
转义序列使字符串包含一些特殊字符而不会使编译器引发问题，
这些字符包括非打印的(控制)字符和对编译器有特殊含义的字符。
示例:
警报(响铃)符: \a
回退符: \b
换行符: \n
水平制表符: \t
字符": \"
字符\: \\


3.2 scanf函数
int i, j;
float x, y;
scanf("%d%d%f%f", &i, &j, &x, &y);
如果scanf函数调用中忘记在变量前面放置符号&, 将会产生不可预知且可能是
毁灭性的结果。程序崩溃时常见的结果。最起码不会把从输入都进来的值存储到
变量中，变量将保留原有的值。

scanf函数由格式串控制的。调用时, scanf函数从左边开始处理字符串中的信息。
对于格式串中的每一个转换说明, scanf函数从输入的数据中定位适当类型的项,
并在必要时跳过空格。
然后, scanf函数读入数据项, 并且在遇到不可能属于此项的字符时停止。
如果读入数据项成功，那么scanf函数会继续处理格式串中的剩余部分；
如果某一项不能成功读入，那么scanf函数将不在查看格式串的剩余部分而立即返回。

scanf函数会忽略空白字符(white-space character, 包括空格符, 水平和
垂直制表符, 换页符和换行符)。


=========================================================
当scanf函数遇到一个不可能属于当前项的字符时, 它会把此字符"返回原处",
以便在扫描下一个输入项或者下一次调用scanf函数时再次读入。
思考下面4个数的排列:
1-20.3-4.0e3(换行符)
scanf("%d%d%f%f", &i, &j, &x, &y);
=======
转换说明%d。第一个非空的输入字符是1; 因为整数可以以1开始, 所以scanf函数
接着读取下一个字符, 即-。scanf函数识别出字符-不能出现在整数内, 所以把1
存入变量i中, 而把字符-放回原处。

转换说明%d。随后, scanf函数读取字符-, 2, 0和.(句点)。因为整数不能包含小数点，
所以scanf函数把-20存入变量j中, 而把字符.放回原处。

转换说明%f。接下来scanf函数读取字符., 3 和 -。因为浮点数不能在数字后边有负号,
所以scanf函数把0.3存入变量中, 而把字符-放回原处。

转换说明%f。最后, scanf函数读取字符-, 4, ., 0, e, 3 和 (换行符).
因为浮点数不能包含换行符, 所以scanf函数把 -4.0X10^3存入变量y中, 
而把换行符放回原处。



=========================================================
=========================================================
问与答
问: 转换说明%i也可以用于读写整数。%i与%d之间有什么区别?
答: 在printf格式串中使用时, 二者没有区别。
    但是在scanf格式串中%d只能与十进制(基数为10)形式的整数项相匹配，
    而%i则可以匹配用八进制(基数为8)、十进制或十六进制(基数为16)表示的整数。
    如果输入的数有前缀0(如 056), 那么%i会把它作为八进制数来处理;
    如果输入的数有前缀0x或0X(如 0x56), 那么%i会把它作为十六进制数来处理。
    建议scanf时坚持采用%d


    


