最简单的表达式是变量和常量
变量表示程序运行时需要计算的值，常量表示不变的值，
更加复杂的表达式把运算符用于操作数(操作数自身就是表达式)。

在表达式a+(b*c)中, 运算符+用于操作数a和(b*c),
而这两者自身又都是表达式。

4.1 算术运算符
一元运算符: +, -
二元运算符:
    加法类: +, -
    乘法类: *, /, %

除%运算符以外, 其它的二元运算符既允许操作数是整数也允许操作数是浮点数，
两者混合也是可以的。

运算符/ 和 运算符%需要特别注意以下几点:
1. 运算符/可能产生意外的结果。当两个操作数都是整数时, 运算符/会丢掉分数部分来"截取"结果。
2. 运算符%要求操作数是整数。如果两个操作数中有一个不是整数，程序将无法编译通过。
3. 把零用作/或者%的右操作数会导致未定义的行为。


运算符的优先级和结合性
一元运算符的优先级大于二元运算符
最高: +  - (一元运算符)
中间: * / %
最低: +  - (二元运算符)


当表达式包含两个或更多个相同优先级的运算符时, 仅有运算符优先级规则是不够用的。
这种情况下, 运算符的结合性(associativity)开始发挥作用。
如果运算符是从左向右结合的, 那么称这种运算符是左结合的(Left associative).

二元运算符(即* / % + -)都是左结合的，所以
i - j - k   等价于 (i - j) - k
i * j / k   等价于 (i * j) / k


如果运算符是从右向左结合的，那么称这种运算符是右结合的(Right associative).
一元运算符(+ 和 -)都是右结合的，所以
- + i   等价于  -(+i)


4.2.1 简单赋值
表达式v = e 的赋值效果是求出表达式e的值, 并把此值复制给v.
e可以是常量、变量或更复杂的表达式；

在C语言中, 复制就像+那样是运算符。换句话说, 赋值操作产生结果,
这就如同两个数相加产生结果一样。
赋值表达式v = e的值就是赋值运算后v的值。

既然赋值是运算符, 那么多个赋值可以串联在一起:
i = j = k = 0;
运算符=是右结合的, 所以上述赋值表达式等价于
i = (j = (k = 0));


4.2.2 左值
大多数C语言运算符允许它们的操作数是变量, 常量或者包含其他运算符的表达式。
然而, 赋值运算符要求它的左操作数必须是左值(lvalue)。
左值表示存储在计算机内存中的对象，而不是常量或计算的结果。
变量是左值，而诸如10 或 2 * i这样的表达式则不是左值。
目前为止，变量是已知的唯一左值。



4.2.3 复合赋值
示例: i = i + 2;   ==>  i += 2;
+=
-=
*=
/=
%=

复合赋值运算符有着和 = 运算符一样的特性。
特别是, 它们都是右结合的, 所以语句
i += j += k;
意味着
i += (j += k);


4.3 自增运算符和自减运算符
++
--
前缀自增: ++i;
后缀自增: i++;


未定义的行为
根据C标准, 类似 c = (b = a + 2) - (a = 1);
和 j = i * i++;这样的语句都会导致"未定义的行为"(undefined behavior).
当程序中出现未定义的行为时, 后果是不可预料的。


4.5 表达式语句
C语言有一条不同寻常的规则, 那就是任何表达式都可以用作语句.


问与答:
问: 我想把%运算符用于浮点数, 但程序无法通过编译, 该怎么办?
答: %运算符要求操作数是整数, 可以试试fmod函数。

问: 如果C语言有左值, 那它也有右值吗?
答: 是的, 当然。左值是可以出现在赋值左侧的表达式，而右值则是可以出现在
    赋值右侧的表达式。因此，右值可以是变量、常量或更加复杂的表达式。

问: 前面提到: 如果v有副作用, 那么 v += e 不等价于 v = v + e. 可以解释一下吗?
答: 计算v += e只会求一次v的值, 而计算v = v + e则会求两次v的值。
    在后一种情况下, 对v求值可能引起的任何副作用也都会出现两次。
    在下面的例子中, i只自增一次:
    a[i++] += 2;
    如果用=代替+=, 语句变成:
    a[i++] = a[i++] + 2;
    上述语句的结果是未定义的。

问: ++ 和 -- 是否可以处理float型变量?
答: 可以。自增和自减运算也可以用于浮点数，但实际应用中极少采用自增和自减运算符
    来处理float型变量。

问: 在使用后缀形式的++或--时, 何时执行自增或自减操作?
答: C语言标准引入了"顺序点"的概念，并且指出"应该在前一个顺序点和下一个顺序点
    之间对存储的操作数的值进行更新"。
    在C语言中有多种不同类型的顺序点，表达式语句的末尾是其中一种。
    在表达式语句的末尾，该语句中的所有自增和自减操作都必须执行完毕，否则不能执行下一条语句。
    在后面章节中会遇到的一些运算符(逻辑与、逻辑或、条件和逗号)对顺序点也有影响。
    函数调用也是如此:在函数调用执行之前, 所有的实际参数必须全部计算出来。
    如果实际参数恰巧是含有++或--运算符的表达式, 那么必须在调用前进行自增或自减操作。


