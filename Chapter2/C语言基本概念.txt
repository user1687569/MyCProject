预处理器通常会和编译器集成在一起，
所以人们甚至可能不会注意到它在工作。

在UNIX系统环境下，通常把C编译器命名为cc。
为了编译和链接pun.c程序，需要在终端或命令行窗口录入如下命令：
% cc pun.c
(字符%是UNIX系统的提示符，不需要输入。)
在使用编译器cc时，系统自动进行链接操作，而无需单独的链接命令。
编译器cc有许多选项，其中有一个选项(-o选项)允许为含有可执行程序的文件选择名字。
例如，假设要把文件pun.c生成的可执行文件命名为pun，那么只需录入下列命令：
% cc -o pun pun.c

GCC编译器
GCC编译器是最流行的C编译器之一，它随Linux发行，但也有面向其他很多平台的版本。
这种编译器的使用与传统的UNIX cc编译器相似。
例如，编译程序pun.c可以使用以下命令：
% gcc -o pun pun.c

即使最简单的C程序也依赖3个关键的语言特性：
指令(在编译前修改程序的编辑命令)、
函数(被命名的可执行代码块，如main函数)、
语句(程序运行时执行的命令)。

指令：
预处理器会首先对其进行编辑。我们把预处理器执行的命令称为指令。
这里先只关注#include指令
#include <stdio.h>
这条指令说明，在编译前把<stdio.h>中的信息"包含"到程序中。
<stdio.h>包含了关于C标准输入/输出库的信息。
C语言拥有大量类似于<stdio.h>的头，每个头都包含一些标准库的内容。
这段程序中包含<stdio.h>的原因是: C语言不同于其他的编程语言，
它没有内置的"读"和"写"命令。输入/输出功能由标准库中的函数实现。
所有指令都是以字符#开始的。这个字符可以把C程序中的指令和其他代码区分开来。
指令默认只占一行，每条指令的结尾没有分号或其他特殊标记。


函数: 
函数类似于其他编程语言中的"过程"或"子过程"，它们是用来构建程序的构建块。
事实上，C程序就是函数的集合。
函数分为两大类：一类是程序员编写的函数，另一类则是作为C语言实现的一部分
提供的函数。我们把后者称为库函数(library function)，
因为它们属于一个由编译器提供的函数"库"。


语句:
语句是程序运行时执行的命令。
C语言规定每条语句都要以分号结尾。
由于语句可以连续占用多行，有时很难确定它的结束位置，
因此用分号来向编译器显示语句的结束位置。
但指令通常都只占一行，因此不需要用分号结尾。


注释
/*   ....   */
C99提供了另一种类型的注释，以//(两个相邻的斜杠)开始


变量与赋值
当我们把一个包含小数点的常量赋值给float型变量时，
最好在该常量后面加一个字母f(代表float):
int height;
float profit;
profit = 2150.48f;
不加f可能会引发编译器的警告。

printf("Height: %d\n", height);
占位符%d用来指明在显示过程中变量height的值的显示位置。
%d仅用于int型变量。如果要显示float型变量，需要用%f来代替%d.
默认情况下，%f会显示出小数点后6位数字。
如果要强制%f显示小数点后p位数字，可以把.p放置在%和f之间。
printf("Profit: $%.2f\n", profit);


初始化：
在程序开始执行时，某些变量会被自动设置为零，而大多数变量则不会。
没有默认值并且尚未在程序中被赋值的变量是未初始化的(uninitialized).

//Warning
如果试图访问未初始化的变量(例如，用printf显示变量的值，或者在表达式中
使用该变量)，可能会得到不可预知的结果，如2568，-30891或者其他同样没有
意义的数值。在某些编译器中，可能会发生更坏的情况(甚至是程序崩溃)。


显示表达式的值：
printf的功能不局限于显示变量中存储的数，它可以显示任意数值表达式的值。
利用这一特性可以简化程序，又可以减少变量的数量。例如，语句
volume = height * length * width;
printf("%d\n", volume);
可以用以下形式代替：
printf("%d\n", height * length * width);

printf显示表达式的能力说明了C语言的一个通用原则：
在任何需要数值的地方，都可以使用具有相同类型的表达式。


标识符: 
标识符可以含有字母、数字和下划线。
C语言是区分大小写的;


关键字:
auto    break   case    char    const   continue
default do      double  else    enum    extern
float   for     goto    if      int     long
register        return  short   signed  sizeof
static  struct  switch  typedef union   unsigned
void    volatile        while   
C99新增的关键字: 
inline  restrict        _Bool   _Complex    _Imaginary


C程序的书写规范
我们可以把C程序看成是一连串记号(token)，即许多在不改变意思的基础上无法再分割的字符组。
标识符和关键字都是记号。
像+和-这样的运算符、逗号和分号这样的标点符号以及字符串字面量，也都是记号。
例如，语句
printf  (   "Height: %d\n"    ,    height  )   ;
   1    2         3           4       5    6   7

其中记号1 和 记号5 都是标识符
记号3是字符串字面量
记号2、记号4、记号6 和 记号7则是标点符号

大多数情况下，程序中记号之间的空格数量没有严格要求。
除非两个记号合并后会产生第三个记号，否则在一般情况下记号之间根本不需要留有间隔。


添加足够的空格和空行可以使程序更便于阅读和理解。
C语言允许在记号之间插入任意数量的间隔，
这些间隔可以是空格符、制表符和换行符。


GCC: GNU C Compiler的简称。
GNU: 自由软件基金会的(Free Software Foundation)的一个项目。


GCC有什么过人之处？
GCC不仅能免费获取，能编译很多语言。
GCC还可以在许多操作系统下运行，并为多种不同的CPU生成代码。
GCC是许多基于UNIX的操作系统(包括Linux, BSD 和 Mac OS X)的主要编译器，
并广泛用于商业软件开发。


GCC发现程序中错误的能力如何？
GCC有多个命令行选项来控制程序检查的彻底程度。
使用这些选项可以帮助我们有效地找出程序中潜在地故障区域。
下面是一些比较常用的选项。
-Wall               使编译器在检测到可能的错误时生成警告信息
                    -W后面可以加上具体的警告代码, -Wall表示所有的 -W选项
-W                  除了-Wall生成的警告消息外, 还需要针对具体情况的额外警告消息
-pedantic           根据C标准的要求生成警告信息. 这样可以避免在程序中使用非标准特性
-ansi               禁用GCC的非标准C特性, 并启用一些不太常用的标准特性
-std=c89或-std=c99  指明使用哪个版本的C编译器来检查程序
这些选项常常可以结合使用:
% gcc —O -Wall -W -pedantic -ansi -std=c99 -o pun pun.c


问: 在某些C语言书中, main函数的结尾使用的是exit(0)而不是return 0, 二者是否一样呢？
答: 当出现在main函数中时，这两种语句是完全等价的；
    二者都终止程序执行，并且向操作系统返回0值。使用哪种语句完全依据个人喜好而定。


问：编译器是完全移除注释还是用空格替换掉注释呢？
答：编译器必须用一个空格字符替换每条注释语句。


问：为什么浮点常量需要以字母f结尾？
答：包含小数点但却不以f结尾的常量是double型的。double型的值比float型的值存储得更精确，
并且可以存储比float型更大的值，因此在给float型变量赋值时需要加上字母f。如果不加f，编译器
可能会生成一条警告消息，告诉你存储到float型变量中的数可能超出了该变量的取值范围。



